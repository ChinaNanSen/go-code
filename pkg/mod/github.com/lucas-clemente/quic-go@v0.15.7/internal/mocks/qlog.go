// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/qlog (interfaces: Tracer)

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	congestion "github.com/lucas-clemente/quic-go/internal/congestion"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
	wire "github.com/lucas-clemente/quic-go/internal/wire"
	qlog "github.com/lucas-clemente/quic-go/qlog"
)

// MockTracer is a mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// BufferedPacket mocks base method
func (m *MockTracer) BufferedPacket(arg0 qlog.PacketType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BufferedPacket", arg0)
}

// BufferedPacket indicates an expected call of BufferedPacket
func (mr *MockTracerMockRecorder) BufferedPacket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedPacket", reflect.TypeOf((*MockTracer)(nil).BufferedPacket), arg0)
}

// ClosedConnection mocks base method
func (m *MockTracer) ClosedConnection(arg0 qlog.CloseReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClosedConnection", arg0)
}

// ClosedConnection indicates an expected call of ClosedConnection
func (mr *MockTracerMockRecorder) ClosedConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosedConnection", reflect.TypeOf((*MockTracer)(nil).ClosedConnection), arg0)
}

// DroppedEncryptionLevel mocks base method
func (m *MockTracer) DroppedEncryptionLevel(arg0 protocol.EncryptionLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DroppedEncryptionLevel", arg0)
}

// DroppedEncryptionLevel indicates an expected call of DroppedEncryptionLevel
func (mr *MockTracerMockRecorder) DroppedEncryptionLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroppedEncryptionLevel", reflect.TypeOf((*MockTracer)(nil).DroppedEncryptionLevel), arg0)
}

// DroppedPacket mocks base method
func (m *MockTracer) DroppedPacket(arg0 qlog.PacketType, arg1 protocol.ByteCount, arg2 qlog.PacketDropReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DroppedPacket", arg0, arg1, arg2)
}

// DroppedPacket indicates an expected call of DroppedPacket
func (mr *MockTracerMockRecorder) DroppedPacket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroppedPacket", reflect.TypeOf((*MockTracer)(nil).DroppedPacket), arg0, arg1, arg2)
}

// Export mocks base method
func (m *MockTracer) Export() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export")
	ret0, _ := ret[0].(error)
	return ret0
}

// Export indicates an expected call of Export
func (mr *MockTracerMockRecorder) Export() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockTracer)(nil).Export))
}

// LossTimerCanceled mocks base method
func (m *MockTracer) LossTimerCanceled() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LossTimerCanceled")
}

// LossTimerCanceled indicates an expected call of LossTimerCanceled
func (mr *MockTracerMockRecorder) LossTimerCanceled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LossTimerCanceled", reflect.TypeOf((*MockTracer)(nil).LossTimerCanceled))
}

// LossTimerExpired mocks base method
func (m *MockTracer) LossTimerExpired(arg0 qlog.TimerType, arg1 protocol.EncryptionLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LossTimerExpired", arg0, arg1)
}

// LossTimerExpired indicates an expected call of LossTimerExpired
func (mr *MockTracerMockRecorder) LossTimerExpired(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LossTimerExpired", reflect.TypeOf((*MockTracer)(nil).LossTimerExpired), arg0, arg1)
}

// LostPacket mocks base method
func (m *MockTracer) LostPacket(arg0 protocol.EncryptionLevel, arg1 protocol.PacketNumber, arg2 qlog.PacketLossReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LostPacket", arg0, arg1, arg2)
}

// LostPacket indicates an expected call of LostPacket
func (mr *MockTracerMockRecorder) LostPacket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LostPacket", reflect.TypeOf((*MockTracer)(nil).LostPacket), arg0, arg1, arg2)
}

// ReceivedPacket mocks base method
func (m *MockTracer) ReceivedPacket(arg0 *wire.ExtendedHeader, arg1 protocol.ByteCount, arg2 []wire.Frame) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedPacket", arg0, arg1, arg2)
}

// ReceivedPacket indicates an expected call of ReceivedPacket
func (mr *MockTracerMockRecorder) ReceivedPacket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedPacket", reflect.TypeOf((*MockTracer)(nil).ReceivedPacket), arg0, arg1, arg2)
}

// ReceivedRetry mocks base method
func (m *MockTracer) ReceivedRetry(arg0 *wire.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedRetry", arg0)
}

// ReceivedRetry indicates an expected call of ReceivedRetry
func (mr *MockTracerMockRecorder) ReceivedRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedRetry", reflect.TypeOf((*MockTracer)(nil).ReceivedRetry), arg0)
}

// ReceivedStatelessReset mocks base method
func (m *MockTracer) ReceivedStatelessReset(arg0 *[16]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedStatelessReset", arg0)
}

// ReceivedStatelessReset indicates an expected call of ReceivedStatelessReset
func (mr *MockTracerMockRecorder) ReceivedStatelessReset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedStatelessReset", reflect.TypeOf((*MockTracer)(nil).ReceivedStatelessReset), arg0)
}

// ReceivedTransportParameters mocks base method
func (m *MockTracer) ReceivedTransportParameters(arg0 *wire.TransportParameters) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedTransportParameters", arg0)
}

// ReceivedTransportParameters indicates an expected call of ReceivedTransportParameters
func (mr *MockTracerMockRecorder) ReceivedTransportParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedTransportParameters", reflect.TypeOf((*MockTracer)(nil).ReceivedTransportParameters), arg0)
}

// ReceivedVersionNegotiationPacket mocks base method
func (m *MockTracer) ReceivedVersionNegotiationPacket(arg0 *wire.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedVersionNegotiationPacket", arg0)
}

// ReceivedVersionNegotiationPacket indicates an expected call of ReceivedVersionNegotiationPacket
func (mr *MockTracerMockRecorder) ReceivedVersionNegotiationPacket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedVersionNegotiationPacket", reflect.TypeOf((*MockTracer)(nil).ReceivedVersionNegotiationPacket), arg0)
}

// SentPacket mocks base method
func (m *MockTracer) SentPacket(arg0 *wire.ExtendedHeader, arg1 protocol.ByteCount, arg2 *wire.AckFrame, arg3 []wire.Frame) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SentPacket", arg0, arg1, arg2, arg3)
}

// SentPacket indicates an expected call of SentPacket
func (mr *MockTracerMockRecorder) SentPacket(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentPacket", reflect.TypeOf((*MockTracer)(nil).SentPacket), arg0, arg1, arg2, arg3)
}

// SentTransportParameters mocks base method
func (m *MockTracer) SentTransportParameters(arg0 *wire.TransportParameters) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SentTransportParameters", arg0)
}

// SentTransportParameters indicates an expected call of SentTransportParameters
func (mr *MockTracerMockRecorder) SentTransportParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentTransportParameters", reflect.TypeOf((*MockTracer)(nil).SentTransportParameters), arg0)
}

// SetLossTimer mocks base method
func (m *MockTracer) SetLossTimer(arg0 qlog.TimerType, arg1 protocol.EncryptionLevel, arg2 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLossTimer", arg0, arg1, arg2)
}

// SetLossTimer indicates an expected call of SetLossTimer
func (mr *MockTracerMockRecorder) SetLossTimer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLossTimer", reflect.TypeOf((*MockTracer)(nil).SetLossTimer), arg0, arg1, arg2)
}

// StartedConnection mocks base method
func (m *MockTracer) StartedConnection(arg0, arg1 net.Addr, arg2 protocol.VersionNumber, arg3, arg4 protocol.ConnectionID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartedConnection", arg0, arg1, arg2, arg3, arg4)
}

// StartedConnection indicates an expected call of StartedConnection
func (mr *MockTracerMockRecorder) StartedConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedConnection", reflect.TypeOf((*MockTracer)(nil).StartedConnection), arg0, arg1, arg2, arg3, arg4)
}

// UpdatedKey mocks base method
func (m *MockTracer) UpdatedKey(arg0 protocol.KeyPhase, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatedKey", arg0, arg1)
}

// UpdatedKey indicates an expected call of UpdatedKey
func (mr *MockTracerMockRecorder) UpdatedKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedKey", reflect.TypeOf((*MockTracer)(nil).UpdatedKey), arg0, arg1)
}

// UpdatedKeyFromTLS mocks base method
func (m *MockTracer) UpdatedKeyFromTLS(arg0 protocol.EncryptionLevel, arg1 protocol.Perspective) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatedKeyFromTLS", arg0, arg1)
}

// UpdatedKeyFromTLS indicates an expected call of UpdatedKeyFromTLS
func (mr *MockTracerMockRecorder) UpdatedKeyFromTLS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedKeyFromTLS", reflect.TypeOf((*MockTracer)(nil).UpdatedKeyFromTLS), arg0, arg1)
}

// UpdatedMetrics mocks base method
func (m *MockTracer) UpdatedMetrics(arg0 *congestion.RTTStats, arg1, arg2 protocol.ByteCount, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatedMetrics", arg0, arg1, arg2, arg3)
}

// UpdatedMetrics indicates an expected call of UpdatedMetrics
func (mr *MockTracerMockRecorder) UpdatedMetrics(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedMetrics", reflect.TypeOf((*MockTracer)(nil).UpdatedMetrics), arg0, arg1, arg2, arg3)
}

// UpdatedPTOCount mocks base method
func (m *MockTracer) UpdatedPTOCount(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatedPTOCount", arg0)
}

// UpdatedPTOCount indicates an expected call of UpdatedPTOCount
func (mr *MockTracerMockRecorder) UpdatedPTOCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedPTOCount", reflect.TypeOf((*MockTracer)(nil).UpdatedPTOCount), arg0)
}
